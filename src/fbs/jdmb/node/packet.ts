// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AnyPacket, unionToAnyPacket, unionListToAnyPacket } from '../../jdmb/node/any-packet.js';


export class Packet {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Packet {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPacket(bb:flatbuffers.ByteBuffer, obj?:Packet):Packet {
  return (obj || new Packet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPacket(bb:flatbuffers.ByteBuffer, obj?:Packet):Packet {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Packet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

packetType():AnyPacket {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : AnyPacket.NONE;
}

packet<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startPacket(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPacketType(builder:flatbuffers.Builder, packetType:AnyPacket) {
  builder.addFieldInt8(0, packetType, AnyPacket.NONE);
}

static addPacket(builder:flatbuffers.Builder, packetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, packetOffset, 0);
}

static endPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // packet
  return offset;
}

static finishPacketBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPacketBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPacket(builder:flatbuffers.Builder, packetType:AnyPacket, packetOffset:flatbuffers.Offset):flatbuffers.Offset {
  Packet.startPacket(builder);
  Packet.addPacketType(builder, packetType);
  Packet.addPacket(builder, packetOffset);
  return Packet.endPacket(builder);
}
}
