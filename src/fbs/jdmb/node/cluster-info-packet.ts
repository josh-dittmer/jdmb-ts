// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NodeInfo } from '../../jdmb/node/node-info.js';


export class ClusterInfoPacket {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClusterInfoPacket {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClusterInfoPacket(bb:flatbuffers.ByteBuffer, obj?:ClusterInfoPacket):ClusterInfoPacket {
  return (obj || new ClusterInfoPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClusterInfoPacket(bb:flatbuffers.ByteBuffer, obj?:ClusterInfoPacket):ClusterInfoPacket {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClusterInfoPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nodes(index: number, obj?:NodeInfo):NodeInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new NodeInfo()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 40, this.bb!) : null;
}

nodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startClusterInfoPacket(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nodesOffset, 0);
}

static startNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(40, numElems, 4);
}

static endClusterInfoPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClusterInfoPacket(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset):flatbuffers.Offset {
  ClusterInfoPacket.startClusterInfoPacket(builder);
  ClusterInfoPacket.addNodes(builder, nodesOffset);
  return ClusterInfoPacket.endClusterInfoPacket(builder);
}
}
